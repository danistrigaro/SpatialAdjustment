# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Vector Rectify
                                 A QGIS plugin
 A tool to adjust vector layers
                              -------------------
        begin                : 2015-05-21
        git sha              : $Format:%H$
        copyright            : (C) 2015 by Daniele Strigaro, Giuliano Curti
        email                : daniele.strigaro@gmail.com, giulianc51@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os, sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4 import QtGui, uic
from qgis.gui import *
from qgis.core import *
import qgis.utils
import processing
import csv
from time import gmtime, strftime

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'vector_rectify_dialog_base.ui'))


class VectorRectifyDialog(QtGui.QDialog, FORM_CLASS):
    vLayer = ""
    srcList = []
    dstList = []
    markerListMP = []
    markerListMC = []
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(VectorRectifyDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.canvas = iface.mapCanvas()
        #setto icone
        self.loadLayerBtn.setIcon(QIcon(os.path.join(os.path.dirname(__file__),'icons','addVect.svg')))
        self.removeLayerBtn.setIcon(QIcon(os.path.join(os.path.dirname(__file__),'icons','rmVect.svg')))
        self.addGCPBtn.setIcon(QIcon(os.path.join(os.path.dirname(__file__),'icons','gcp.svg')))
        self.cleanSelBtn.setIcon(QIcon(os.path.join(os.path.dirname(__file__),'icons','rmGCP.svg')))
        self.zoomInBtn.setIcon(QIcon(os.path.join(os.path.dirname(__file__),'icons','mActionZoomIn.svg')))
        self.zoomOutBtn.setIcon(QIcon(os.path.join(os.path.dirname(__file__),'icons','mActionZoomOut.svg')))
        self.panBtn.setIcon(QIcon(os.path.join(os.path.dirname(__file__),'icons','mActionPan.svg')))
        self.rmRowBtn.setIcon(QIcon(os.path.join(os.path.dirname(__file__),'icons','mActionDeleteSelected.svg')))
        self.zoomToLayerBtn.setIcon(QIcon(os.path.join(os.path.dirname(__file__),'icons','mActionZoomToLayer.svg')))
        #attacco funzioni ai bottoni
        QObject.connect(self.button_box, SIGNAL('rejected()'), self.cancelEvent)
        QObject.connect(self.loadLayerBtn, SIGNAL("clicked()"), self.loadLayer)
        QObject.connect(self.removeLayerBtn, SIGNAL("clicked()"), self.removeLayer)
        QObject.connect(self.addGCPBtn, SIGNAL("clicked()"), self.addGCP)
        QObject.connect(self.cleanSelBtn, SIGNAL("clicked()"), self.cleanSel)
        QObject.connect(self.rmRowBtn, SIGNAL("clicked()"), self.rmRow)
        #QObject.connect(self.run, SIGNAL("clicked()"), self.runAdjust)
        QObject.connect(self.zoomInBtn, SIGNAL("clicked()"), self.zoomIn)
        QObject.connect(self.zoomOutBtn, SIGNAL("clicked()"), self.zoomOut)
        QObject.connect(self.panBtn, SIGNAL("clicked()"), self.pan)
        QObject.connect(self.zoomToLayerBtn, SIGNAL('clicked()'), self.zoomToLayer)
        # creao il mapcavas
        self.mapPreview = QgsMapCanvas(self)
        self.tabWidget.addTab(self.mapPreview, "Map Canvas")
        # set mapPreview tools
        self.toolZoomIn = QgsMapToolZoom(self.mapPreview, False)
        self.toolZoomOut = QgsMapToolZoom(self.mapPreview, True)
        self.toolPan = QgsMapToolPan(self.mapPreview)
    #personal function
    def addTextToBrowser(self, text):
        if (self.textBrowser.selectAll()==''):
            self.textBrowser.setText(strftime("%Y-%m-%d %H:%M:%S", gmtime()) + "\n" + text)
        else:
            self.textBrowser.append(strftime("%Y-%m-%d %H:%M:%S", gmtime()) + "\n" + text)

    #functions to close and cancel
    def closeEvent(self, event):
        self.removeLayer()
        self.cleanSel()
        self.textBrowser.clear()
    def cancelEvent(self):
        self.removeLayer()
        self.cleanSel()
        self.textBrowser.clear()
    #function to remove only one row in table
    def rmRow(self):
        # -- print self.tableWidget.currentRow()
        if (self.tableWidget.currentRow()>=0):
            self.mapPreview.scene().removeItem(self.markerListMP[self.tableWidget.currentRow()])
            self.markerListMP.remove(self.markerListMP[self.tableWidget.currentRow()])
            try:
                self.canvas.scene().removeItem(self.markerListMC[self.tableWidget.currentRow()])
                self.markerListMC.remove(self.markerListMC[self.tableWidget.currentRow()])
                # -- print 'no GCP on map canvas to remove'
            self.tableWidget.removeRow(self.tableWidget.currentRow())

    #a set of map tool
    def zoomIn(self):
        if (self.zoomInBtn.isChecked()):
            if (self.panBtn.isChecked()):
                self.mapPreview.unsetMapTool(self.toolPan)
                self.panBtn.setChecked(False)
            elif (self.zoomOutBtn.isChecked()):
                self.zoomOutBtn.setChecked(False)
                self.mapPreview.setMapTool(self.toolZoomOut)
            self.mapPreview.setMapTool(self.toolZoomIn)
            # -- print 'set zoomIn'
        else:
            # -- print 'unset zoomIn'
            self.mapPreview.unsetMapTool(self.toolZoomIn)
    def zoomOut(self):
        if (self.zoomOutBtn.isChecked()):
            if (self.panBtn.isChecked()):
                self.mapPreview.unsetMapTool(self.toolPan)
                self.panBtn.setChecked(False)
            elif (self.zoomInBtn.isChecked()):
                self.zoomInBtn.setChecked(False)
                self.mapPreview.setMapTool(self.toolZoomIn)
            self.mapPreview.setMapTool(self.toolZoomOut)
            # -- print 'set zoomOut'
        else:
            # -- print 'unset zoomOut'
            self.mapPreview.unsetMapTool(self.toolZoomOut)
    def pan(self):
        if (self.panBtn.isChecked()):
            if (self.zoomInBtn.isChecked()):
                self.zoomInBtn.setChecked(False)
                self.mapPreview.setMapTool(self.toolZoomIn)
            elif (self.zoomOutBtn.isChecked()):
                self.zoomOutBtn.setChecked(False)
                self.mapPreview.setMapTool(self.toolZoomOut)
            self.mapPreview.setMapTool(self.toolPan)
            # -- print 'set zoomOut'
        else:
            # -- print 'unset zoomOut'
            self.mapPreview.unsetMapTool(self.toolPan)
    def zoomToLayer(self):
        if (self.vLayer != ""):
            #self.mapPreview.setLayerSet(layerToSet)
            self.mapPreview.zoomToFullExtent()

    #function to add layer
    def loadLayer(self):
        if (self.vLayer == ""):
            self.pname = QFileDialog.getOpenFileName(None,'Open file',os.path.expanduser('~'),'*.shp')
            if self.pname:
                fname = self.pname.split('/')
                self.vLayer = QgsVectorLayer(self.pname, fname[-1] + '_adjust', "ogr")
                # -- print "aperto layer",fname[-1]
                layerToSet = []
                QgsMapLayerRegistry.instance().addMapLayers([self.vLayer], False)
                layerToSet.append(QgsMapCanvasLayer(self.vLayer, True, False))
                self.mapPreview.setLayerSet(layerToSet)
                self.mapPreview.zoomToFullExtent()
                self.addTextToBrowser('Layer loaded')
                # azzera la tabella dei CP
                #self.on_pushButton_clear_pressed()
        else:
            self.addTextToBrowser("Can't load the layer")
            QMessageBox.information(None, 'info', "Please remove the layer that is already present" )
    #function to remove layer
    def removeLayer(self):
        if (self.vLayer != ""):
            QgsMapLayerRegistry.instance().removeMapLayer(self.vLayer.id())
            self.mapPreview.refresh()
            self.vLayer = ""
            self.addTextToBrowser('Layer removed')
    #functions to add point
    def addPnt(self,canvas,pnt):
        color = QColor(250,150,0)
        size = 25
        x,y = pnt.x(),pnt.y()
        marker = QgsVertexMarker(canvas)
        marker.setColor(color)
        marker.setIconSize(size)
        marker.setCenter(QgsPoint(x,y))
        marker.show()
        return marker

    def clickMapPreview(self, point, button):
      
        """
        prova codice per snap
        """

        # trasforma in screen coordinates
        newPoint = self.mapPreview.getCoordinateTransform().transform(point)
        # .. e in QPoint
        # -- print point.x(), point.y()
        # -- print newPoint.x(), newPoint.y()
        pnt = QPoint(point.x(), point.y())
        # attiva lo snapper
        mySnapper = QgsMapCanvasSnapper(self.mapPreview)
        (reval, snapped) = mySnapper.snapToBackgroundLayers(pnt)
        if (snapped != []):
            vertex = QgsPoint(snapped[0].snappedVertex.x(), snapped[0].snappedVertex.y())
            markerMapPreview = self.addPnt(self.mapPreview,vertex)
            self.markerListMP.append(markerMapPreview)
            self.srcList.append([vertex.x(),vertex.y()])
            nRow = self.tableWidget.rowCount()
            self.tableWidget.insertRow(nRow)
            checkItem = QTableWidgetItem()
            checkItem.setFlags(Qt.ItemIsUserCheckable |
                               Qt.ItemIsEnabled)
            checkItem.setCheckState(Qt.Checked)
            self.tableWidget.setItem(nRow,0, checkItem)
            self.tableWidget.setItem(nRow,1, QTableWidgetItem(str(vertex.x())))
            self.tableWidget.setItem(nRow,2, QTableWidgetItem(str(vertex.y())))
            self.clickTool1.canvasClicked.disconnect()
            self.mapPreview.unsetMapTool(self.clickTool1)
            self.clickTool2 = QgsMapToolEmitPoint(self.canvas)
            self.canvas.setMapTool(self.clickTool2)
            self.clickTool2.canvasClicked.connect(self.clickMapCanvas)
            self.addTextToBrowser('Source GCP added (snapped): ' + str(point.x()) + ", " + str(point.y()))
        else:
            markerMapPreview = self.addPnt(self.mapPreview,point)
            self.markerListMP.append(markerMapPreview)
            self.srcList.append([point.x(),point.y()])
            nRow = self.tableWidget.rowCount()
            self.tableWidget.insertRow(nRow)
            checkItem = QTableWidgetItem()
            checkItem.setFlags(Qt.ItemIsUserCheckable |
                               Qt.ItemIsEnabled)
            checkItem.setCheckState(Qt.Checked)
            self.tableWidget.setItem(nRow,0, checkItem)
            self.tableWidget.setItem(nRow,1, QTableWidgetItem(str(point.x())))
            self.tableWidget.setItem(nRow,2, QTableWidgetItem(str(point.y())))

            self.clickTool1.canvasClicked.disconnect()
            self.mapPreview.unsetMapTool(self.clickTool1)
            self.clickTool2 = QgsMapToolEmitPoint(self.canvas)
            self.canvas.setMapTool(self.clickTool2)
            self.clickTool2.canvasClicked.connect(self.clickMapCanvas)
            self.addTextToBrowser('Source GCP added (not snapped): ' + str(point.x()) + ", " + str(point.y()))

    def clickMapCanvas(self, point, button):

        # trasforma in screen coordinates
        newPoint = self.mapPreview.getCoordinateTransform().transform(point)
        # .. e in QPoint
        pnt = QPoint(newPoint.x(),newPoint.y())
        # attiva lo snapper
        mySnapper = QgsMapCanvasSnapper(self.mapPreview)
        (reval, snapped) = mySnapper.snapToBackgroundLayers(pnt)
        if (snapped != []):
            vertex = QgsPoint(snapped[0].snappedVertex.x(), snapped[0].snappedVertex.y())
            markerMapCanvas = self.addPnt(self.canvas,vertex)
            self.markerListMC.append(markerMapCanvas)
            self.dstList.append([vertex.x(),vertex.y()])
            self.clickTool2.canvasClicked.disconnect()
            self.canvas.unsetMapTool(self.clickTool2)
            nRow = self.tableWidget.rowCount()
            self.tableWidget.setItem(nRow-1,3, QTableWidgetItem(str(vertex.x())))
            self.tableWidget.setItem(nRow-1,4, QTableWidgetItem(str(vertex.y())))
            self.addTextToBrowser('Dest GCP added (snapped): ' + str(point.x()) + ", " + str(point.y()))
        else:
            markerMapCanvas = self.addPnt(self.canvas,point)
            self.markerListMC.append(markerMapCanvas)
            self.dstList.append([point.x(),point.y()])
            self.clickTool2.canvasClicked.disconnect()
            self.canvas.unsetMapTool(self.clickTool2)
            nRow = self.tableWidget.rowCount()
            self.tableWidget.setItem(nRow-1,3, QTableWidgetItem(str(point.x())))
            self.tableWidget.setItem(nRow-1,4, QTableWidgetItem(str(point.y())))
            self.addTextToBrowser('Dest GCP added (not snapped): ' + str(point.x()) + ", " + str(point.y()))

    def cleanSel(self):
        """
            Pulisce lo stack dei selezionati e toglie i marker;
        """
        # elimina i marcatori
        for m in self.markerListMC:
            self.canvas.scene().removeItem(m)
            # -- print m
        self.markerListMC = []
        for m in self.markerListMP:
            self.mapPreview.scene().removeItem(m)
        self.tableWidget.clear()
        self.tableWidget.setRowCount(0)
        self.tableWidget.setHorizontalHeaderLabels(['on/off', 'source x', 'source y', 'destination x', 'destination y'])
        self.markerListMP = []
        # rinfresca il video
        self.canvas.refresh()
        self.mapPreview.refresh()

    def getValues(self):
        """
            get the table values
        """
        nRow = self.tableWidget.rowCount()
        nCol = self.tableWidget.columnCount()
        data = []
        for r in range(nRow):
            riga = []
            if (self.tableWidget.item(r,0).checkState() == Qt.Checked):
                for c in range(nCol-1):
                    item = self.tableWidget.item(r,c+1)
                    # -- print item.text()
                    riga.append(item.text())
                data.append(riga)
        return data

    def addGCP(self):
        if (self.vLayer != ""):
            self.zoomIn()
            self.zoomInBtn.setChecked(False)
            self.zoomOut()
            self.zoomOutBtn.setChecked(False)
            self.pan()
            self.panBtn.setChecked(False)
            # out click tool will emit a QgsPoint on every click
            self.clickTool1 = QgsMapToolEmitPoint(self.mapPreview)
            self.clickTool1.canvasClicked.connect(self.clickMapPreview)
            self.mapPreview.setMapTool(self.clickTool1)
        else:
            QMessageBox.information(None, 'info', "Please insert a layer" )

    #spatial adjustment function
    def runAdjust(self):
        nRow = self.tableWidget.rowCount()
        if (nRow >= 4):
            data = self.getValues()
            if (len(data) >= 4):
                basepath = os.path.dirname(__file__)
                idCsv = 'sad'
                filepath = os.path.abspath(os.path.join(basepath, idCsv+".csv"))
                with open(filepath, "r+") as gcpCSV:
                    writer = csv.writer(gcpCSV, delimiter=' ')
                    i = 0
                    for r in data:
                        writer.writerow(r)
                        i = i+1
                gcpCSV.close()
                #for m in gcpList:
                #    csv.writerow()
                # -- print self.pname
                out = processing.runalg('grass:v.transform.pointsfile',self.pname,filepath,None,None,None,None,0,None)
                # -- print str(out['output'])
                self.vLayerOut = QgsVectorLayer(str(out['output']), 'output_spatialadjustment.shp', "ogr")
                render = self.canvas.mapRenderer()
                curCrs = render.destinationCrs()
                QgsMapLayerRegistry.instance().addMapLayers([self.vLayerOut])
                self.canvas.zoomToFullExtent()
                #os.remove(filepath)
                self.addTextToBrowser('Process finished!')
            else:
                QMessageBox.information(None, 'info', "Check at least 4 ground control points" )
        else:
            QMessageBox.information(None, 'info', "Add at least 4 ground control points" )
        #
